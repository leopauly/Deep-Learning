name: "leo_dnn"

# To be used if the data is passed from the main program (useful in deployment state)
#input : "data"
#input_dim: 1
#input_dim: 1
#input_dim: 360
#input_dim: 480

# Data layer to be used for training
layer {
  name: "dnndata"
  include { phase: TRAIN }
  type: "ImageData" #"ImageLabelmapData"
  image_data_param { source : 'train.lst' batch_size: 100 shuffle: true}
  #transform_param {#  scale: 0.1#  mirror: 1#  crop_size: 227#}
  transform_param {scale: 0.003921}
  top : "data"
  top : "label"

}

# Data layer to be used for testing
layer {
  name: "dnndata"
  type: "ImageData"
  include {phase: TEST}
  # type: "ImageLabelmapData"   # To be usd if the net has to be trained with input and output as images
  image_data_param { source : 'test.lst' batch_size: 10 }
  #transform_param {#  scale: 0.1#  mirror: 1#  crop_size: 227#}#
  top : "data"
  top : "label"
}

# Convolution layers
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 2
    stride: 1
    pad:2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 2
    stride: 1
    pad:2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# Fully connected layers
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
  loss_weight: 1
}
